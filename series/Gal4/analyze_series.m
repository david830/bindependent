% auto generated by Experiment.py

stem1107 = '../../../2012-11-07-Time_series_x2/Time_data/';

experimentName = 'Gal4 Series';
device_name = 'Gal4';
inducer_name = 'Hours';
load('../../controls/CMtriplicate.mat');
input = channel_named(CM, 'Blue');
output = channel_named(CM, 'Yellow');
constitutive = channel_named(CM, 'Red');
level_file_pairs = ...
 {12,  {[stem1107 'T12-1_H9_H09_P3.fcs'],  [stem1107 'T12-2_H11_H11_P3.fcs']};
  16,  {[stem1107 'T16-1_A1_A01_P3.fcs'],  [stem1107 'T16-2_D1_D01_P3.fcs']};
  18,  {[stem1107 'T18-1_A8_A08_P3.fcs'],  [stem1107 'T18-2_D8_D08_P3.fcs']};
  20,  {[stem1107 'T20-1_B3_B03_P3.fcs'],  [stem1107 'T20-2_E3_E03_P3.fcs']};
  22,  {[stem1107 'T22-1_B10_B10_P3.fcs'], [stem1107 'T22-2_E10_E10_P3.fcs']};
  24,  {[stem1107 'T24-1_A1_A01_P3.fcs'],  [stem1107 'T24-2_C1_C01_P3.fcs']};
  26,  {[stem1107 'T26-1_A1_A01_P3.fcs'],  [stem1107 'T26-2_D7_D07_P3.fcs']};
  28,  {[stem1107 'T28-1_A8_A08_P3.fcs'],  [stem1107 'T28-2_E2_E02_P3.fcs']};
  30,  {[stem1107 'T30-1_B3_B03_P3.fcs'],  [stem1107 'T30-2_E9_E09_P3.fcs']};
  42,  {[stem1107 'T42-1_A8_A08_P3.fcs'],  [stem1107 'T42-2_C8_C08_P3.fcs']};
  48,  {[stem1107 'T48-1_B10_B10_P3.fcs'], [stem1107 'T48-2_F4_F04_P3.fcs']};
  58,  {[stem1107 '../T58/T58-2_No_Dox_P3.fcs']}; % Note: T58 #1 is excluded since it contains too little data (10K points)
  60,  {[stem1107 'T60-1_C5_C05_P3.fcs'],  [stem1107 'T60-2_F5_F05_P3.fcs']};
  63,  {[stem1107 'T63-1_B3_B03_P3.fcs'],  [stem1107 'T63-2_D3_D03_P3.fcs']};
  69,  {[stem1107 'T69-1_C5_C05_P3.fcs'],  [stem1107 'T69-2_F11_F11_P3.fcs']};
  72,  {[stem1107 'T72-1_C12_C12_P3.fcs'], [stem1107 'T72-2_G6_G06_P3.fcs']}};
experiment = Experiment(experimentName,{inducer_name}, level_file_pairs);
fprintf('Starting analysis...\n');
bins = BinSequence(4,0.1,10,'log_bins');
AP = AnalysisParameters(bins,{'input',input; 'output',output; 'constitutive' constitutive});
AP=setMEFLPerPlasmid(AP,1000');
AP=setMinValidCount(AP,10');
AP=setPemDropThreshold(AP,5');
AP=setUseAutoFluorescence(AP,false');
sampleresults = process_data(CM,experiment,AP);
results = summarize_data(CM,experiment,AP,sampleresults);

OS = OutputSettings('Fine',device_name,'');
plot_bin_statistics(sampleresults,OS);

expression = get_channel_results(results,'output');
counts = getBinCounts(results);
active = getFractionActive(results);
n_levels = size(expression,2);

o_index = find(CM,output); % Determine data column from ColorModel

fraction_active = zeros(n_levels,1);
mean_active_expression = zeros(n_levels,1);
n_samples = 0;
sample_inductions = []; sample_activity = []; sample_expression = [];
for i=1:n_levels,
    which = counts(:,i)>0;
    fraction_active(i) = sum(counts(which,i) .* active(which,i)) / sum(counts(which,i));
    which = active(:,i) > 0.9;
    mean_active_expression(i) = 10.^wmean(log10(expression(which,i)),counts(which,i));
    block_start = n_samples+1;
    for j=1:numel(sampleresults{i}),
        n_samples = n_samples+1;
        sample_inductions(n_samples) = level_file_pairs{i,1};
        sample = sampleresults{i}{j};

        which = sample.BinCounts>getMinValidCount(AP);
        sample_activity(n_samples) = sum(sample.BinCounts(which) .* sample.FractionActive(which)) / sum(sample.BinCounts(which));
        which = sample.FractionActive>0.9;
        sample_expression(n_samples) = 10.^wmean(log10(sample.Means(which,o_index)),sample.BinCounts(which));
    end
    std_fraction_active(i) = std(sample_activity(block_start:n_samples));
    std_active_expression(i) = geostd(sample_expression(block_start:n_samples));
end

induction_levels = [level_file_pairs{:,1}];

h = figure('PaperPosition',[1 1 5 3.66]);
plot(induction_levels,fraction_active,'-'); hold on;
plot(sample_inductions,sample_activity,'*');
xlabel('Time (hours)');  ylabel('Fraction Active');
xlim([0 75]); ylim([0 1]);
title('Gal4 fraction active vs time');
outputfig(h,'Gal4-fraction-active');

h = figure('PaperPosition',[1 1 5 3.66]);
plot([level_file_pairs{:,1}],mean_active_expression,'-'); hold on;
plot(sample_inductions,sample_expression,'*');
xlabel('Time (hours)');  ylabel('OFP MEFL');
xlim([0 75]);
title('Gal4 active population mean MEFL vs time');
outputfig(h,'Gal4-population-mean');
set(gca,'YScale','log');
outputfig(h,'Gal4-population-mean-log');

save('-V7','Gal4-series-Fine.mat','CM','experiment','AP','sampleresults','results','fraction_active','mean_active_expression','std_active_expression','sample_expression');

%%% Find the expression model:
addpath('..');
samples = [sample_inductions' sample_expression' sample_activity'];

fn = @(params)(expression_error(params(1),params(2),params(3),params(4),samples));
expression_fit = fminsearch(fn,[18 12 1e6 0.7]);
% ans = [40.6 6.5 7.1e5 0.68]
div_time = expression_fit(1);
shock_time = expression_fit(2);
mean_divisions = (72-shock_time-(div_time/2))/div_time
% ans = 1.11

[model_levels model_acts] = expression_model(expression_fit(1), expression_fit(2), expression_fit(3), expression_fit(4), 72, 0.1);

h = figure('PaperPosition',[1 1 5 3.66]);
plot(sample_inductions,sample_expression,'*'); hold on;
plot(induction_levels,mean_active_expression,'-'); hold on;
plot(0:0.1:72,model_levels,'r-');
xlabel('Time (hours)');  ylabel('OFP MEFL');
xlim([0 75]); ylim([1e5 1.5e7]);
title('Expression Model');
outputfig(h,'Gal4-population-mean-model');
set(gca,'YScale','log'); ylim([1e5 1e8]);
outputfig(h,'Gal4-population-mean0log-consensus');

h = figure('PaperPosition',[1 1 5 3.66]);
plot(sample_inductions,sample_activity,'*'); hold on;
plot(induction_levels,fraction_active,'-'); hold on;
plot(0:0.1:72,model_acts,'r-');
xlabel('Time (hours)');  ylabel('OFP MEFL');
xlim([0 75]);
title('Activation Model');
outputfig(h,'Gal4-fraction-active-model');

%%%%%
% Test a timing hypothesis:
% OFP levels should rise quickly for all subpopulations, but then stop for high plasmid count as the IFP rises.
% Actually, however, we see OFP levels stable relative to mean CFP across all populations over the whole time.
% That means there's no significant repression ever happening.

n_bins = get_n_bins(getBins(AP));
IFPs = zeros(n_bins,n_levels);
OFPs = zeros(n_bins,n_levels);
for i=1:numel(induction_levels)
    IFPs(:,i) = sampleresults{i}{1}.Means(:,1);
    OFPs(:,i) = sampleresults{i}{1}.Means(:,3);
end

load('../Constitutive/ControlSeries.mat');

bin_levels = get_bin_centers(getBins(AP));

h = figure('PaperPosition',[1 1 5 3.66]);
for i=1:n_bins
    semilogy(induction_levels(2:end),IFPs(i,2:end)./mean_activities(1,:)./bin_levels(i),'b*-'); hold on;
    semilogy(induction_levels(2:end),OFPs(i,2:end)./mean_activities(1,:)./bin_levels(i),'g*-');
end

h = figure('PaperPosition',[1 1 5 3.66]);
for i=1:4:n_bins
    semilogy(induction_levels(2:end),OFPs(i,2:end)./mean_activities(1,:),'g*'); hold on;
end

h = figure('PaperPosition',[1 1 5 3.66]);
for i=1:n_bins
    semilogy(induction_levels(2:end),IFPs(i,2:end),'b*-'); hold on;
    semilogy(induction_levels(2:end),OFPs(i,2:end),'g*-');
end
